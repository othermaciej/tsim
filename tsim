#!/usr/bin/env python

import argparse
import re

from tyrant.card_collection import CardCollection
from tyrant.deck import Deck
from tyrant.deck_pool import DeckPool
from tyrant.deck_versus_deck_test import DeckVersusDeckTest
from tyrant.deck_versus_pool_test import DeckVersusPoolTest
from tyrant.pool_versus_deck_test import PoolVersusDeckTest
from tyrant.log import set_logging

def process_arguments():
    parser = argparse.ArgumentParser(description='Simulate tyrant battles.')
    parser.add_argument('off_deck', metavar='OFF_DECK', type=str, nargs=1,
                        help='offense deck to test')
    parser.add_argument('def_deck', metavar='DEF_DECK', type=str, nargs=1,
                        help='defense deck to test')
    parser.add_argument('-s --surge-only', dest='surge_only', action='store_const',
                        const=True, default=False,
                        help='test only using Surge (default: test both Fight and Surge)')
    parser.add_argument('-f --fight-only', dest='fight_only', action='store_const',
                        const=True, default=False,
                        help='test only using Fight (default: test both Fight and Surge)')
    parser.add_argument('-r --rounds', metavar='R', dest='rounds', type=int,
                        default=1000,
                        help='test matchup for R rounds (default: 1000)')
    parser.add_argument('-l --logging', dest='logging', action='store_const',
                        const=True, default=False,
                        help='test matchup for R rounds (default: 1000)')

    return parser.parse_args()

def main():
    args = process_arguments()

    print "Tyrant Combat Simulator v0.0"
    collection = CardCollection("cards.xml")
    collection.dump_short_summary()

    if args.logging:
        print "== Logging enabled. =="
        set_logging(True)

    offense_is_pool = re.search("\.deckpool$", args.off_deck[0])
    defense_is_pool = re.search("\.deckpool$", args.def_deck[0])

    if offense_is_pool:
        offense = DeckPool(args.off_deck[0], collection)
    else:
        offense = Deck(args.off_deck[0], collection)

    if defense_is_pool:
        defense = DeckPool(args.def_deck[0], collection)
    else:
        defense = Deck(args.def_deck[0], collection)

    print "\nOffense: " + offense.name()
    print   "         " + re.sub("\n", "\n         ", offense.contents_summary())
    print "\nDefense: " + defense.name()
    print   "         " + re.sub("\n", "\n         ", defense.contents_summary())
    print ""
    
    if offense_is_pool and defense_is_pool:
        raise Exception("Bad parameters", "Offense and defense cannot both be deck pools")
    elif offense_is_pool:
        test_kind = PoolVersusDeckTest        
    elif defense_is_pool:
        test_kind = DeckVersusPoolTest
    else:
        test_kind = DeckVersusDeckTest
        
    if not args.surge_only:
        test = test_kind(offense, defense, False, args.rounds)
        test.run()
        test.print_results()

    if not args.fight_only and not args.surge_only:
        print ""

    if not args.fight_only:
        test = test_kind(offense, defense, True, args.rounds)
        test.run()
        test.print_results()

main()
