#!/usr/bin/env python

from xml.dom.minidom import parse
from string import atoi
from string import join

class Skill:
    "A Tyrant card skill"
    def __init__(self, name, value, all, target_faction):
        self._name = name
        self._value = value
        self._all = all
        self._target_faction = target_faction

    def name(self):
        return self._name

    def value(self):
        return self._value

    def all(self):
        return self._all

    def target_faction(self):
        return self._target_faction

    def description(self):
        description = self.name()
        description += " All" if self.all() else ""
        description += " " + self.target_faction() if self.target_faction() != None else ""
        description += " " + self.value() if self.value() != None else ""
        return description

class Card:
    "A Tyrant card"
    def __init__(self, name, faction, type, skills, rarity, unique):
        self._name = name
        self._type = type
        self._faction = faction
        self._skills = skills
        self._rarity = rarity
        self._unique = unique

    def type(self):
        return self._type

    def name(self):
        return self._name

    def faction(self):
        return self._faction

    def skills(self):
        return self._skills

    def rarity(self):
        return self._rarity

    def unique(self):
        return self._unique

    def rarity_and_faction_string(self):
        if self.rarity() == "Legendary":
            return "Legendary " + self.faction()
        elif self.unique():
            return "Unique " + self.faction()
        else:
            return self.faction()
        
    def skill_description(self):
        return join([skill.description() for skill in self.skills()], ", ")

    def description(self):
        return self.name()

class ActionCard(Card):
    "A Tyrant action card"
    def __init__(self, name, faction, skills, rarity, unique):
        Card.__init__(self, name, faction, "action", skills, rarity, unique)

    def description(self):
        return self.name() + "  [" + self.skill_description() + "]"

class AssaultCard(Card):
    "A Tyrant assault card"
    def __init__(self, name, faction, health, attack, delay, skills, rarity, unique):
        Card.__init__(self, name, faction, "assault", skills, rarity, unique)
        self._health = health
        self._attack = attack
        self._delay = delay

    def health(self):
        return self._health

    def attack(self):
        return self._attack

    def delay(self):
        return self._delay

    def description(self):
        return self.name() + " (" + str(self.rarity_and_faction_string()) + ")  [" + str(self.health()) + "hp " + str(self.attack()) + "atk / " + str(self.delay()) + " | " + self.skill_description() + "]"

class CommanderCard(Card):
    "A Tyrant commander card"
    def __init__(self, name, faction, health, skills, rarity, unique):
        Card.__init__(self, name, faction, "commander", skills, rarity, unique)
        self._health = health

    def health(self):
        return self._health

    def description(self):
        return self.name() + " (" + str(self.rarity_and_faction_string()) + ")  [" + str(self.health()) + "hp | " + self.skill_description() + "]"

class StructureCard(Card):
    "A Tyrant structure card"
    def __init__(self, name, faction, health, delay, skills, rarity, unique):
        Card.__init__(self, name, faction, "structure", skills, rarity, unique)
        self._health = health
        self._delay = delay

    def health(self):
        return self._health

    def delay(self):
        return self._delay

    def description(self):
        return self.name() + " (" + str(self.rarity_and_faction_string()) + ")  [" + str(self.health()) + "hp / " + str(self.delay()) + " | "  + self.skill_description() + "]"

def parse_card_file(filename):
    document = parse(filename)
    return [parse_unit(node) for node in document.documentElement.childNodes if node.nodeName == "unit" and extract_field(node, "set") != None]
    
def print_cards(label, cardList):
    print label + ": " + str(len(cardList))
    for card in cardList:
        print "    " + card.description()

def extract_field(node, name):
    nodeList = node.getElementsByTagName(name)
    if nodeList.length == 0:
        return None
    return nodeList[0].firstChild.data

def extract_numeric_field(node, name):
    field = extract_field(node, name)
    if field == None:
        return field;
    return atoi(field)

def extract_boolean_field(node, name):
    return extract_field(node, name) != None

def type_code_to_faction(type_code):
    if type_code == 1:
        return "Imperial"
    elif type_code == 3:
        return "Bloodthirsty"
    elif type_code == 4:
        return "Xeno"
    elif type_code == 9:
        return "Raider"
    else:
        return None

def rarity_code_to_rarity(code):
    if code == 1:
        return "Common"
    elif code == 2:
        return "Uncommon"
    elif code == 3:
        return "Rare"
    elif code == 4:
        return "Legendary"
    else:
        return None

def extract_faction_field(node, name):
    field = extract_numeric_field(node, name)
    if field == None:
        return field;
    return type_code_to_faction(field)

def extract_rarity_field(node, name):
    field = extract_numeric_field(node, name)
    if field == None:
        return field;
    return rarity_code_to_rarity(field)

def parse_skill_node(node):
    name = node.getAttribute("id").capitalize()
    value = node.getAttribute("x")
    value = value if value != "" else None
    all = node.getAttribute("all") != ""
    target_faction_type_code = node.getAttribute("y")
    target_faction = type_code_to_faction(atoi(target_faction_type_code)) if target_faction_type_code != "" else None

    return Skill(name, value, all, target_faction)

def extract_skills(node, name):
    nodeList = node.getElementsByTagName(name)
    return [parse_skill_node(skill_node) for skill_node in nodeList]
    
def parse_unit(node):
    name = extract_field(node, "name")
    health = extract_numeric_field(node, "health")
    attack = extract_numeric_field(node, "attack")
    delay = extract_numeric_field(node, "cost")
    set = extract_field(node, "set")
    faction = extract_faction_field(node, "type")
    rarity = extract_rarity_field(node, "rarity")
    unique = extract_boolean_field(node, "unique")
    skills = extract_skills(node, "skill")

    if set == None:
        # Not a real card
        return None
    if health == None:
        # Actions are the only cards that have no health
        return ActionCard(name, faction, skills, rarity, unique)
    elif attack == None and delay != None:
        # Commanders for some reason show up as attack 0 but structures have no attack
        # Also check cost just in case
        return StructureCard(name, faction, health, delay, skills, rarity, unique)
    elif delay == None and health != None:
        # Commanders have no delay but unlike actions have health
        return CommanderCard(name, faction, health, skills, rarity, unique)
    else:
        # If it's notanything else, it's an assault card
        return AssaultCard(name, faction, health, attack, delay, skills, rarity, unique)

class CardCollection:
    def __init__(self, filename):
        self._cards = parse_card_file(filename)
        
    def dump(self):
        commanderCards = [card for card in self._cards if card.type() == "commander"]
        assaultCards = [card for card in self._cards if card.type() == "assault"]
        structureCards = [card for card in self._cards if card.type() == "structure"]
        actionCards = [card for card in self._cards if card.type() == "action"]

        print_cards("Commander Cards", commanderCards)
        print_cards("Assault Cards", assaultCards)
        print_cards("Structure Cards", structureCards)
        print_cards("Action Cards", actionCards)

def main():
    print "Tyrant Combat Simulator v0.0"
    cards = CardCollection("cards.xml")
    cards.dump()

main()
